name: CI - Eslint, Tests & Terraform Deployment

on:
  push:
    branches:
      - main
      - fix/ci
  pull_request:
    branches:
      - main
      - fix/ci

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies in backend
        run: npm install
        working-directory: ./backend

      - name: Lint check in backend
        run: npm run lint
        working-directory: ./backend

  test:
    runs-on: ubuntu-latest
    needs: lint  # Exécuter les tests uniquement si le linting passe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./backend
        run: npm install

      - name: Run tests
        working-directory: ./backend
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Exécuter le déploiement uniquement si les tests passent

    container:
      image: hashicorp/terraform:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Decode Google Cloud credentials
        env:
          GCLOUD_KEY_BASE64: ${{ secrets.GCLOUD_SERVICE_KEY }}
        run: |
          echo "$GCLOUD_KEY_BASE64" | base64 -d > /tmp/key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json
      
      - name: Init terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
        run: terraform init
        working-directory: ./infra
      
      - name: Terraform Plan
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
          PROJECT_ID: ${{ vars.PROJECT_ID }}
          SSH_KEY: ${{ vars.SSH_KEY }}
        run: |
          terraform plan -var="project_id=$PROJECT_ID" -var="ssh_public_key=$SSH_KEY"
        working-directory: ./infra
      
      - name: Terraform Apply
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
          PROJECT_ID: ${{ vars.PROJECT_ID }}
          SSH_KEY: ${{ vars.SSH_KEY }}
        run: terraform apply -var="project_id=$PROJECT_ID" -var="ssh_public_key=$SSH_KEY" -auto-approve
        working-directory: ./infra
  
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Newman (Postman CLI)
        run: npm install -g newman

      - name: Decode and run Postman E2E tests
        env:
          POSTMAN_API_KEY_B64: ${{ secrets.POSTMAN_API_KEY_B64 }}
        run: |
          # Décoder la clé API
          POSTMAN_API_KEY=$(echo "$POSTMAN_API_KEY_B64" | base64 -d)

          # Authentification avec Postman CLI
          postman login --with-api-key "$POSTMAN_API_KEY"

          # Exécution des tests depuis la collection
          postman collection run 27376445-a6339afc-5470-404d-8715-49c3f0d9df58
      
